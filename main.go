package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/stanley-robotics/go-fields-updater/models"
	"github.com/stanley-robotics/go-fields-updater/utils"
)

var (
	typesArg  = flag.String("type", "", "comma-separated list of type/structures names; must be set")
	outputArg = flag.String("output", "", "output file name; default srcdir/<type>_updater.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	_, _ = fmt.Fprintf(os.Stderr, "Go-Fields-Updater is a tool to generate Go code that adds useful method to update specific fields of specific type.\n")
	_, _ = fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	_, _ = fmt.Fprintf(os.Stderr, "\tgo-fields-updater [flags] -type T [directory]\n")
	_, _ = fmt.Fprintf(os.Stderr, "\tgo-fields-updater [flags] -type T files... # Must be a single package\n")
	_, _ = fmt.Fprintf(os.Stderr, "For more information, see:\n")
	_, _ = fmt.Fprintf(os.Stderr, "\thttps://github.com/stanley-robotics/go-fields-updater\n")
	_, _ = fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("go-fields-updater: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typesArg) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typesArg, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	var g models.Generator

	if len(args) == 1 && utils.IsDir(args[0]) {
		dir = args[0]
	} else {
		dir = filepath.Dir(args[0])
	}

	pkg := g.ParsePackage(args, []string{})

	// Print the header and package clause.
	g.Printf("// Code generated by \"go-fields-updater %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", pkg.Name())
	g.Printf("\n")

	// Run generate for each type.
	for _, t := range types {
		g.Generate(t)
	}

	// Format the output.
	src := g.Format()

	// Figure out filename to write to
	outputName := *outputArg
	if outputName == "" {
		baseName := fmt.Sprintf("%s_updater.go", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}

	// Write to tmpfile first
	tmpFile, err := ioutil.TempFile(dir, fmt.Sprintf("%s_updater_", types[0]))
	if err != nil {
		log.Fatalf("creating temporary file for output: %s", err)
	}
	_, err = tmpFile.Write(src)
	if err != nil {
		tmpFile.Close()
		os.Remove(tmpFile.Name())
		log.Fatalf("writing output: %s", err)
	}
	tmpFile.Close()

	// Rename tmpfile to output file
	err = os.Rename(tmpFile.Name(), outputName)
	if err != nil {
		log.Fatalf("moving tempfile to output file: %s", err)
	}
}
